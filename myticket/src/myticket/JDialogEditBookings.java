/*
 * JFrameEditBookings.java
 *
 * Created on October 2, 2005, 11:25 PM
 */

package myticket;

import java.io.*;
import java.util.*;
import javax.swing.event.*;

import java.net.*;
import java.text.*;     // Used for date formatting.
import javax.swing.*;

import java.awt.print.*;
import key.Preferrences;


/**
 *
 * @author  sdperret
 */
public class JDialogEditBookings extends javax.swing.JDialog {
    
    /** Creates new form JFrameEditBookings */
    public JDialogEditBookings( Performance aPerformance, BookingSystem aBookingSystem, JFrame parent ) throws IOException {
        
        super( parent, true );
        anInit( aPerformance, aBookingSystem );
        
    }
    
    public JDialogEditBookings( Performance aPerformance, BookingSystem aBookingSystem ) throws IOException {
        
        anInit( aPerformance, aBookingSystem );
        
    }
    
    
    
    private void anInit( Performance aPerformance, BookingSystem aBookingSystem ) throws IOException{
        myTicket = aBookingSystem;
        performance = aPerformance;
        
        performance.loadBookingsTicketsInMemory();
      

        initComponents();
        
        jLabelTotal.setText( performance.getTotalIncome() + "" );
        
        sorter.setSortingStatus( 0, TableSorter.ASCENDING);
        ticketsSorter.setSortingStatus( 0, TableSorter.ASCENDING);
        
        
        
        TableModelListener toto = new TableModelListener( ){
            public void tableChanged( TableModelEvent e ){

                //jLabelNbFreeSeats.setText( booking.getPerformance().getNbFreeSeats() + " seats free + " + booking.getNbSeats() + " seats booked below = " + (booking.getPerformance().getNbFreeSeats() + booking.getNbSeats()) + " seats available for booking");
                jLabelNbFreeSeats.setText( (performance.getNbFreeSeats() ) + " seats free");

            }
        };
        myTicket.getPerformances().addTableModelListener( toto );
    }
    
    
    /*public ShowableArrayList<Booking> getBookings(){
        return( bookings );
    }*/
    
    /*public TableSorter getSorter(){
        return( sorter );
    }*/
    
    /*public void addBooking( Booking aBooking ){
        bookings.add( aBooking );
    }*/
    
    /*public ShowableArrayList<Ticket> getTickets(){
        return( tickets );
    }*/
    /*public void addTicket( Ticket aTicket ){
        tickets.add( aTicket );
    }*/
    
    /*public Booking getBooking ( String aString, int aNb ){
        for( Booking b : bookings ){
            if( b.getClient().getName().equals( aString ) && b.getNbSeats() == aNb ){
                return( b );
            }
        }
        return( null );
    }*/
    
    /*public Booking getBookingWithId ( long anId, String aString, int aNb) throws BookingNotFoundException{
        for( Booking b : bookings ){
            if( b.getId() == anId && b.getClient().getName().equals( aString ) && b.getNbSeats() == aNb ){
                return( b );
            }
        }
        throw new BookingNotFoundException();
        //return( null );
    }
    
    public Booking getBookingWithId ( long anId ) throws BookingNotFoundException{
        for( Booking b : bookings ){
            //System.out.println("Booking:getBookingWithId ")
            if( b.getId() == anId ){
                return( b );
            }
        }
        throw new BookingNotFoundException();
        //return( null );
    }
    
    
    public Ticket getTicketWithId ( long anId ){
        for( Ticket t : tickets ){
            if( t.getId() == anId ){
                return( t );
            }
        }
        return( null );
    }*/
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButtonEditBooking = new javax.swing.JButton();
        jButtonDeleteBooking = new javax.swing.JButton();
        jButtonMakeTickets = new javax.swing.JButton();
        jScrollPaneBookings = new javax.swing.JScrollPane();
        jTableBookings = new javax.swing.JTable();
        jPanelListAction = new javax.swing.JPanel();
        jButtonPrintBookings = new javax.swing.JButton();
        jButtonSendBookings = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButtonCancelTickets = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTickets = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();
        jLabelCurrency = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabelNbFreeSeats = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setBorder(new javax.swing.border.TitledBorder(null, java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("labelBookingsM" ), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14)));
        jPanel4.setMinimumSize(new java.awt.Dimension(420, 119));
        jPanel4.setPreferredSize(new java.awt.Dimension(520, 463));
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

        jPanel9.setBackground(new java.awt.Color(255, 204, 204));
        jButtonEditBooking.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("buttonEdit" ));
        jButtonEditBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditBookingActionPerformed(evt);
            }
        });

        jPanel9.add(jButtonEditBooking);

        jButtonDeleteBooking.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("buttonDelete" ));
        jButtonDeleteBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteBookingActionPerformed(evt);
            }
        });

        jPanel9.add(jButtonDeleteBooking);

        jButtonMakeTickets.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("buttonMakeTickets" ));
        jButtonMakeTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMakeTicketsActionPerformed(evt);
            }
        });

        jPanel9.add(jButtonMakeTickets);

        jPanel6.add(jPanel9);

        jPanel4.add(jPanel6);

        jScrollPaneBookings.setBackground(new java.awt.Color(255, 204, 204));
        sorter = new TableSorter( performance.getBookings() ); //ADDED THIS
        //JTable table = new JTable(new MyTableModel());          //OLD
        sorter.setTableHeader(jTableBookings.getTableHeader()); //ADDED THIS
        jTableBookings.setModel(sorter);
        //myTicket.getPerformances().addTableModelListener( this.jTableBookings );
        performance.getBookings().addTableModelListener( this.jTableBookings );
        //sorter.addTableModelListener( this.jTableBookings );
        //bookings.addTableModelListener( sorter );

        jTableBookings.getSelectionModel().setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        jTableBookings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBookingsMouseClicked(evt);
            }
        });

        jScrollPaneBookings.setViewportView(jTableBookings);

        jPanel4.add(jScrollPaneBookings);

        jPanelListAction.setBackground(new java.awt.Color(255, 204, 204));
        jButtonPrintBookings.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("buttonPrintList" ));
        jButtonPrintBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintBookingsActionPerformed(evt);
            }
        });

        jPanelListAction.add(jButtonPrintBookings);

        jButtonSendBookings.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("buttonSendListByEmail" ));
        jButtonSendBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendBookingsActionPerformed(evt);
            }
        });

        jPanelListAction.add(jButtonSendBookings);

        jPanel4.add(jPanelListAction);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setBorder(new javax.swing.border.TitledBorder(null, java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("labelTicketsM" ), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14)));
        jPanel7.setBackground(new java.awt.Color(204, 255, 204));
        jButtonCancelTickets.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("buttonCancelTicket" ));
        jButtonCancelTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelTicketsActionPerformed(evt);
            }
        });

        jPanel7.add(jButtonCancelTickets);

        jPanel5.add(jPanel7);

        ticketsSorter = new TableSorter( performance.getTickets() ); //ADDED THIS
        ticketsSorter.setTableHeader(jTableTickets.getTableHeader()); //ADDED THIS
        jTableTickets.setModel(ticketsSorter);

        jTableTickets.setModel(ticketsSorter);
        //ticketsSorter.addTableModelListener( this.jTableTickets );
        //myTicket.getPerformances().addTableModelListener( this.jTableTickets );

        performance.getTickets().addTableModelListener( this.jTableBookings );

        jTableTickets.getSelectionModel().setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        jScrollPane2.setViewportView(jTableTickets);

        jPanel5.add(jScrollPane2);

        jPanel8.setBackground(new java.awt.Color(204, 255, 204));
        jLabel1.setText("Total income: ");
        jPanel8.add(jLabel1);

        jLabelTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTotal.setText("0");
        jLabelTotal.setPreferredSize(new java.awt.Dimension(75, 15));
        jPanel8.add(jLabelTotal);

        jLabelCurrency.setText("frs");
        jPanel8.add(jLabelCurrency);

        jPanel5.add(jPanel8);

        jPanel1.add(jPanel5);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jButtonOK.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("buttonOK" ));
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonOK);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jLabel18.setText(performance.getShow().getTitle());
        jPanel2.add(jLabel18);

        jLabel19.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel19.setText(performance.getShow().getPerformer().getName());
        jPanel2.add(jLabel19);

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel20.setText(performance.getRoom().getCompany().getName());
        jPanel2.add(jLabel20);

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel21.setText(performance.getFormatedDate());
        jPanel2.add(jLabel21);

        jLabelNbFreeSeats.setText(performance.getNbFreeSeats() + " seats free");
        jPanel2.add(jLabelNbFreeSeats);

        jSeparator12.setForeground(new java.awt.Color(204, 204, 204));
        jSeparator12.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator12.setMinimumSize(new java.awt.Dimension(0, 10));
        jSeparator12.setPreferredSize(new java.awt.Dimension(0, 10));
        jPanel2.add(jSeparator12);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
// TODO add your handling code here:
        performance.clearBookingsFromMemory();
        performance.clearTicketsFromMemory();
        
        dispose();
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jTableBookingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBookingsMouseClicked
// TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_jTableBookingsMouseClicked

    private void jButtonCancelTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelTicketsActionPerformed
// TODO add your handling code here:
        
        if( performance.isReadOnly() ){
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageReadOnly"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
            return;
        }
        
        System.out.println("Now in jButtonCancelTicketsActionPerformed");
        
        int sortedSelected = jTableTickets.getSelectedRow();
        System.out.println("sortedSelected: " + sortedSelected);
        
        if( sortedSelected > -1 ){
            int selected = ticketsSorter.modelIndex( sortedSelected );
            System.out.println( " treating ticket " + selected );
            try{
                performance.unsellTicket( performance.getTickets().get( selected ) );
                //tickets.remove( tickets.get( selected ) );
                
            }catch( IOException e ){
                java.awt.Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog( null, "Could not cancel ticket on file", "File error", JOptionPane.OK_OPTION );
            }
            
            myTicket.getPerformances().fireTableDataChanged();
            performance.getTickets().fireTableDataChanged();
        }else{
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageSelectBooking"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
        }
        
    }//GEN-LAST:event_jButtonCancelTicketsActionPerformed

    private void jButtonMakeTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMakeTicketsActionPerformed
// TODO add your handling code here:

        if( performance.isReadOnly() ){
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageReadOnly"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
            return;
        }
        
        
       int sortedSelected = jTableBookings.getSelectedRow();

        if( sortedSelected > -1 ){  
            int selected = sorter.modelIndex( sortedSelected );
            Booking aBooking = performance.getBookings().get( selected );

            System.out.println( performance + " now in editmode: " + performance.isBeingEdited() );
            if( performance.isBeingEdited() ){
                java.awt.Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog( null, "This performance is actually being edited and thus cannot accept bookings now", "Booking error", JOptionPane.OK_OPTION );
            }else{
                try{
                    aBooking.convertBookingToPrebooking();
                    
                    myTicket.getPerformances().fireTableDataChanged();
                    performance.getBookings().fireTableDataChanged();
                    
                    
                    /*myTicket.getPerformances().fireTableDataChanged();
                    performance.getBookings().fireTableDataChanged();*/
                    
                    JDialogBooking toto = new JDialogBooking( this, aBooking, myTicket, false );
                    toto.setVisible( true );
                    dispose();
                }catch( IOException e ){
                    java.awt.Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog( null, "Could not cancel booking on file", "Booking error", JOptionPane.OK_OPTION );
                }
                
            }
        }else{
           java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageSelectBooking"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
        }
        
    }//GEN-LAST:event_jButtonMakeTicketsActionPerformed

    private void jButtonDeleteBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteBookingActionPerformed
// TODO add your handling code here:
        
        if( performance.isReadOnly() ){
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageReadOnly"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
            return;
        } 
        
       int sortedSelected = jTableBookings.getSelectedRow();

        if( sortedSelected > -1 ){  
            int selected = sorter.modelIndex( sortedSelected );
                Booking aBooking = performance.getBookings().get( selected );
                try{
                    //aBooking.getPerformance().cancelBooking( aBooking );
                    performance.cancelBooking( aBooking );
                    //performance.getBookings().remove( aBooking );
                }catch( java.io.IOException e ){
                    java.awt.Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,"Could not cancel booking for " + aBooking.getClient().getName(), "System error",JOptionPane.ERROR_MESSAGE);
                }
        }else{
           java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageSelectBooking"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
        }
        myTicket.getPerformances().fireTableDataChanged();
        performance.getBookings().fireTableDataChanged();
        
    }//GEN-LAST:event_jButtonDeleteBookingActionPerformed

    private void jButtonSendBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendBookingsActionPerformed
    
        //check e-mail adress
        
        
        /*JOptionPane pane = new JOptionPane();
        pane.setInitialValue( performance.getRoom().getCompany().getEmail() );
        pane.showInputDialog( this, "E-mail adress for " + performance.getRoom().getCompany().getName()  );
        
        System.out.println( pane.getValue() );*/
        
        
            String rep = JOptionPane.showInputDialog( this, "E-mail adress for " + performance.getRoom().getCompany().getName(), performance.getRoom().getCompany().getEmail() );
        
            if(rep==null || rep.length()==0){
                JOptionPane.showMessageDialog(null,"Booking List was not sent!", "Canceled sending bookings list",JOptionPane.ERROR_MESSAGE);
            }else{
                
        
            
        
        //if( pane.getValue )
        
        
    Date dDate = new Date();
    SimpleDateFormat dFormat = new SimpleDateFormat("dd.MM.yyyy 'at' HH:mm:ss z");
    DateFormat.getDateInstance(DateFormat.FULL,Locale.US);

    try{ // Open port to server
        smtpSocket = new Socket( myTicket.getEmailOutgoingHostname(), myTicket.getEmailOutgoingPort() );
        os = new DataOutputStream(smtpSocket.getOutputStream());
        is = new DataInputStream(smtpSocket.getInputStream());
            
        if(smtpSocket != null && os != null && is != null){ // Connection was made.  Socket is ready for use.
                // [ Code to send email will be placed in here. ]
            
            
            os.writeBytes("HELO\r\n");
            // You will add the email address that the server 
            // you are using know you as.
            os.writeBytes("MAIL From: <" + myTicket.getEmail() + ">\r\n");
             
            // Who the email is going to.
            os.writeBytes("RCPT To: <" + rep + ">\r\n");
            //IF you want to send a CC then you will have to add this
            os.writeBytes("RCPT Cc: <" + myTicket.getEmail() + ">\r\n");

              
            // Now we are ready to add the message and the 
            // header of the email to be sent out.                
            os.writeBytes("DATA\r\n");
                  
            os.writeBytes("X-Mailer: Via Java\r\n");
            os.writeBytes("DATE: " + dFormat.format(dDate) + "\r\n");
            os.writeBytes("From: " + myTicket.getName() + " <" + myTicket.getEmail() + ">\r\n");
            os.writeBytes("To:  " + performance.getRoom().getCompany().getName() + " <" + performance.getRoom().getCompany().getEmail() + ">\r\n");
               
            //Again if you want to send a CC then add this.
            //os.writeBytes("Cc: CCDUDE <CCPerson@theircompany.com>\r\n");
                
            //Here you can now add a BCC to the message as well
            //os.writeBytes("RCPT Bcc: BCCDude<BCC@invisiblecompany.com>\r\n");
                
            String sSubject = "Booking list for " + performance.getShow().getTitle() + " on " + performance.getFormatedDate() + " at " + performance.getRoom().getCompany().getName();
            String sMessage = "Bookings for " + performance.getShow().getTitle() + " by " + performance.getShow().getPerformer().getName() + "\n\n";        
            sMessage +=performance.getRoom().getCompany().getName() + " / " + performance.getFormatedDate() + "\n";
            //sMessage += performance.getNbBookedSeats() + " seats in list below + " + performance.getNbSoldSeats() + " seats already sold " + performance.getNbFreeSeats() + " free seats\n\n";
            
            
            sMessage += "NAME                                     NB SEATS\n\n";
            
            for( Booking b : performance.getBookings() ){
                String name = b.getClient().getName();
                int aNb = b.getNbSeats();
                
                sMessage += name + " ";
                for( int i = 0; i < (40-name.length()); i++ ){
                    sMessage += "_";
                }
                sMessage += " " + aNb + "   (" + b.getComment() + ")\n";
                
            }
            
            sMessage += "\n*************************************************\n\n";
            sMessage += "TOTAL BOOKED ____________________________ " + performance.getNbBookedSeats() + "\n";
            sMessage += "TOTAL SOLD   ____________________________ " + performance.getNbSoldSeats() + "\n";
            sMessage += "FREE         ____________________________ " + performance.getNbFreeSeats() + "\n";
                    
            
            
            os.writeBytes("Subject: " + sSubject + "\r\n");
            os.writeBytes(sMessage + "\r\n");
            os.writeBytes("\r\n.\r\n");
            os.writeBytes("QUIT\r\n");
                
            // Now send the email off and check the server reply.  
            // Was an OK is reached you are complete.
            String responseline;
            boolean success = false;
            while((responseline = is.readLine())!=null)
            {  // System.out.println(responseline);
                if(responseline.indexOf("Ok") != -1){
                    JOptionPane.showMessageDialog( this, "E-mail sent to " + rep , "E-mail Confirmation", JOptionPane.OK_OPTION );
                    success = true;
                    break;
                }
            }            
            if( success == false ){
                JOptionPane.showMessageDialog( this, "COULD NOT SEND MAIL:\n\n" + "Host " + myTicket.getEmailOutgoingHostname() + " unreachable", "E-mail error", JOptionPane.OK_OPTION );  
            }
        }
    }catch(Exception e){ 
        System.out.println("Host " + myTicket.getEmailOutgoingHostname() + " unknown"); 
        JOptionPane.showMessageDialog( this, "COULD NOT SEND MAIL:\n\n" + "Host " + myTicket.getEmailOutgoingHostname() + " unknown", "E-mail error", JOptionPane.OK_OPTION );  
    }
    
    }
        
    
    }//GEN-LAST:event_jButtonSendBookingsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
        /*try{
            myTicket.save();
            dispose();
        }catch( IOException e ){
            System.out.println("COULD NOT SAVE SYSTEM.DATA");
        }*/
    }//GEN-LAST:event_formWindowClosing

    private void jButtonEditBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditBookingActionPerformed
// TODO add your handling code here:
        /*int selected = jTableBookings.getSelectedRow();
        
        if( selected > -1 ){  
                JDialogEditBooking toto = new JDialogEditBooking( bookings.get(selected), myTicket, this );
                toto.setVisible( true );
        }*/
        edit();
    }//GEN-LAST:event_jButtonEditBookingActionPerformed

    
    private void edit(){
        
        if( performance.isReadOnly() ){
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageReadOnly"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
            return;
        }
        
        int sortedSelected = jTableBookings.getSelectedRow();

        if( sortedSelected > -1 ){  
            int selected = sorter.modelIndex( sortedSelected );
             
            JDialogEditBooking toto = new JDialogEditBooking( performance.getBookings().get(selected), myTicket, this );
            toto.setVisible( true );
            toto.dispose();
        }else{
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("messageSelectBooking"),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", Preferrences.getLocale() ).getString("errorBookingM"), 
                    JOptionPane.OK_OPTION );
        }
        
    }
    
    private void jButtonPrintBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintBookingsActionPerformed
// TODO add your handling code here:
        //JFrameBookingsPreview toto = new JFrameBookingsPreview( bookings, performance );
        //toto.setVisible( true );
        //PrintUtility.printComponent( toto );
        
        performance.getBookings().setTableTitle( "Booking list for " + performance.getShow().getTitle() + "|" + performance.getFormatedDate() + "|" + performance.getRoom().getCompany().getName() );
        performance.getBookings().setTableFooter( "*************************************************|TOTAL BOOKED : " + performance.getNbBookedSeats() + "|TOTAL SOLD   : " + performance.getNbSoldSeats() + "|FREE         : " + performance.getNbFreeSeats() );

        

        Collections.sort( performance.getBookings() );
        
        PrinterJob printJob = PrinterJob.getPrinterJob();
        printJob.setPrintable( performance.getBookings() );
        //if (printJob.printDialog()){
            try {
                System.out.println("jButtonPrint: printing");
                printJob.print();
            } catch(PrinterException pe) {
                System.out.println("Error printing: " + pe);
            }
        //}
        
        
        
        
    }//GEN-LAST:event_jButtonPrintBookingsActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new JFrameEditBookings().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelTickets;
    private javax.swing.JButton jButtonDeleteBooking;
    private javax.swing.JButton jButtonEditBooking;
    private javax.swing.JButton jButtonMakeTickets;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonPrintBookings;
    private javax.swing.JButton jButtonSendBookings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabelCurrency;
    private javax.swing.JLabel jLabelNbFreeSeats;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelListAction;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneBookings;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JTable jTableBookings;
    private javax.swing.JTable jTableTickets;
    // End of variables declaration//GEN-END:variables
 
    Performance performance = null;
    BookingSystem myTicket = null;
    //private ShowableArrayList<Booking> bookings = new ShowableArrayList<Booking>();
    //private ShowableArrayList<Ticket> tickets = new ShowableArrayList<Ticket>();
    
    // for sending email
    private Socket smtpSocket = null;
    private DataOutputStream os = null;
    private DataInputStream is = null;
    
    private TableSorter sorter = null;
    private TableSorter ticketsSorter = null;
}