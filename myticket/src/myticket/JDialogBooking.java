/*
 * JFrameBooking.java
 *
 * Created on October 1, 2005, 9:54 AM
 */

package myticket;

import java.io.*;
import javax.swing.event.*;
import javax.swing.text.*;
import javax.swing.*;
import java.util.*;
import key.Preferrences;
import java.awt.event.*;
import java.awt.*;

import javax.swing.table.*;

/**
 *
 * @author  sdperret
 */
public class JDialogBooking extends javax.swing.JDialog {
    
    /** Creates new form JFrameBooking */
    public JDialogBooking( JFrame parentFrame, Booking aBooking, BookingSystem aBookingSystem, boolean aBool ) {
        
        super( parentFrame, true); 
        anInit( aBooking, aBookingSystem, aBool );
    }
    
    public JDialogBooking( JDialog parentDialog, Booking aBooking, BookingSystem aBookingSystem, boolean aBool ) {
        
        super( parentDialog, true); 
        anInit( aBooking, aBookingSystem, aBool );
    }
    
    
    private void anInit( Booking aBooking, BookingSystem aBookingSystem, boolean aBool ){
        booking = aBooking;
        myTicket = aBookingSystem;
        isANewBooking = aBool;
        
        //setSize(800,500);
        
        initComponents();
        jTableTarif.setRowHeight( 21 );
        
        jTableTarif.moveColumn(3,0);
        jTableTarif.setIntercellSpacing( new Dimension( 10, 1 ) );
        
        
        jTableTarif.getColumnModel().getColumn(1).setPreferredWidth(120);
        jTableTarif.getColumnModel().getColumn(2).setPreferredWidth(520);
        jTableTarif.getColumnModel().getColumn(3).setPreferredWidth(70);
        //jTableTarif.getColumnModel().getColumn(3).setPreferredWidth(150);
        
        
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.LEFT);
        jTableTarif.getColumnModel().getColumn(1).setCellRenderer(renderer);
        jTableTarif.getColumnModel().getColumn(2).setCellRenderer(renderer);
        
            
        setSize(900,620);
        
         
        //jButtonCancel.setEnabled( false );
        jLabelNbFreeSeats.setText( (booking.getPerformance().getNbFreeSeats() + booking.getNbSeats()) + " " + java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelSeatsAvailableForBooking" ) );
                
                
                
                
         
        /*if( !isANewBooking ){
            jButtonBookingOnly.setEnabled( true );
            jButtonSellTickets.setEnabled( true );
        }*/
        
        
        TableModelListener toto = new TableModelListener( ){
            public void tableChanged( TableModelEvent e ){

                //jLabelNbFreeSeats.setText( booking.getPerformance().getNbFreeSeats() + " seats free + " + booking.getNbSeats() + " seats booked below = " + (booking.getPerformance().getNbFreeSeats() + booking.getNbSeats()) + " seats available for booking");
                //jLabelNbFreeSeats.setText( (booking.getPerformance().getNbFreeSeats() + booking.getNbSeats()) + " seats available for booking");
                jLabelNbFreeSeats.setText( (booking.getPerformance().getNbFreeSeats() + booking.getNbSeats()) + " " + java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelSeatsAvailableForBooking" ) );
        
            }
        };

        myTicket.getPerformances().addTableModelListener( toto );
        
        updatePrice();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelPerformance = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabelNbFreeSeats = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        jPanelBooking = new javax.swing.JPanel();
        jPanelTarifs = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTarif = new javax.swing.JTable();
        jLabelTotal = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jButtonRecall = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldStreet = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldTown = new javax.swing.JTextField();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldPhone = new javax.swing.JTextField();
        jSeparator14 = new javax.swing.JSeparator();
        jSeparator15 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        jTextFieldEmail = new javax.swing.JTextField();
        jSeparator16 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jPanel7 = new javax.swing.JPanel();
        jButtonCancel = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jButtonOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("titrePrebooking" ));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelPerformance.setLayout(new javax.swing.BoxLayout(jPanelPerformance, javax.swing.BoxLayout.Y_AXIS));

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 18));
        jLabel14.setText(booking.getPerformance().getShow().getTitle());
        jPanelPerformance.add(jLabel14);

        jLabel15.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel15.setText(booking.getPerformance().getShow().getPerformer().getName());
        jPanelPerformance.add(jLabel15);

        jLabel16.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel16.setText(booking.getPerformance().getRoom().getCompany().getName());
        jPanelPerformance.add(jLabel16);

        jLabel17.setFont(new java.awt.Font("Dialog", 0, 18));
        jLabel17.setText(booking.getPerformance().getFormatedDate());
        jPanelPerformance.add(jLabel17);

        jLabelNbFreeSeats.setFont(new java.awt.Font("Dialog", 1, 18));
        jLabelNbFreeSeats.setForeground(new java.awt.Color(191, 23, 29));
        jLabelNbFreeSeats.setText(booking.getPerformance().getNbFreeSeats() + " seats free");
        jPanelPerformance.add(jLabelNbFreeSeats);

        jSeparator11.setForeground(new java.awt.Color(204, 204, 204));
        jSeparator11.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator11.setMinimumSize(new java.awt.Dimension(0, 10));
        jSeparator11.setPreferredSize(new java.awt.Dimension(0, 10));
        jPanelPerformance.add(jSeparator11);

        getContentPane().add(jPanelPerformance, java.awt.BorderLayout.NORTH);

        jPanelBooking.setLayout(new javax.swing.BoxLayout(jPanelBooking, javax.swing.BoxLayout.Y_AXIS));

        jPanelTarifs.setLayout(new javax.swing.BoxLayout(jPanelTarifs, javax.swing.BoxLayout.Y_AXIS));

        jPanelTarifs.setBorder(new javax.swing.border.TitledBorder(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelSeats" )));
        jScrollPane1.setBackground(new java.awt.Color(255, 255, 204));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(453, 350));
        jTableTarif.setBackground(new java.awt.Color(255, 255, 204));
        jTableTarif.setFont(new java.awt.Font("Dialog", 0, 18));
        jTableTarif.setModel(booking.getTarifs());
        jTableTarif.getSelectionModel().setSelectionMode( ListSelectionModel.SINGLE_SELECTION );

        TableModelListener toto = new TableModelListener( ){
            public void tableChanged( TableModelEvent e ){

                try{
                    try{
                        booking.setNbSeats( getSumPlaces() );
                    }catch( PerformanceBeingEditedException e3 ){
                        java.awt.Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog( null, "Cannot book seats now, the performance setup is beeing edited", "Booking error", JOptionPane.OK_OPTION );
                        booking.cancelPrebooking();
                        dispose();
                    }

                    //booking.getPerformance().updatePreBooking( booking );
                    myTicket.getPerformances().fireTableDataChanged();

                    /*if( getSumPlaces() > 0 ){
                        jButtonSellTickets.setEnabled( true );

                        if( jTextFieldName.getText().length() > 0 ){
                            jButtonBookingOnly.setEnabled( true );

                        }else{
                            jButtonBookingOnly.setEnabled( false );
                        }
                    }else{
                        jButtonBookingOnly.setEnabled( false );
                        jButtonSellTickets.setEnabled( false );
                    }*/

                    updatePrice();

                }catch( PerformanceFullException e2 ){
                    java.awt.Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog( null, "Cannot book so many seats" + " seats. Only " + (booking.getPerformance().getNbFreeSeats() + booking.getNbSeats() ) + " more seat(s) available for booking", "Booking error", JOptionPane.OK_OPTION );
                    int s = jTableTarif.getEditingRow();
                    if( s != -1 ){
                        booking.getTarifs().get(s).setNb(0);
                        myTicket.getPerformances().fireTableDataChanged();
                    }

                }

            }
        };

        booking.getTarifs().addTableModelListener( toto );
        jTableTarif.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableTarifFocusLost(evt);
            }
        });
        jTableTarif.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableTarifKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableTarifKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTableTarifKeyTyped(evt);
            }
        });
        jTableTarif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTarifMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTableTarif);

        jPanelTarifs.add(jScrollPane1);

        jLabelTotal.setFont(new java.awt.Font("Dialog", 1, 18));
        jLabelTotal.setForeground(new java.awt.Color(191, 23, 29));
        jPanelTarifs.add(jLabelTotal);

        jPanelBooking.add(jPanelTarifs);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 204));
        jPanel9.setEnabled(false);
        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator8.setPreferredSize(new java.awt.Dimension(0, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weighty = 0.1;
        jPanel9.add(jSeparator8, gridBagConstraints);

        jSeparator1.setMinimumSize(new java.awt.Dimension(0, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelNameDPSP" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel4, gridBagConstraints);

        jTextFieldName.setFont(new java.awt.Font("Dialog", 0, 18));
        jTextFieldName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldName.setText(booking.getClient().getName());
        jTextFieldName.getDocument().addDocumentListener(

            new DocumentListener(){
                public void insertUpdate( DocumentEvent event ){
                    /*if( event.getDocument().getLength() > 0 && getSumPlaces() > 0 ){
                        jButtonBookingOnly.setEnabled( true );
                    }else{
                        jButtonBookingOnly.setEnabled( false );
                    }*/

                    Document a = event.getDocument();
                    try{
                        //String t = a.getText(0, a.getLength() );
                        String t = a.getText(0, Math.min( 35,a.getLength() ) );
                        booking.getClient().setName( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void removeUpdate( DocumentEvent event ){
                    /*if( event.getDocument().getLength() > 0 && getSumPlaces() > 0){
                        jButtonBookingOnly.setEnabled( true );
                    }else{
                        jButtonBookingOnly.setEnabled( false );
                    }*/
                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, Math.min( 35, a.getLength() ) );
                        booking.getClient().setName( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void changedUpdate( DocumentEvent event) {}

            }

        );
        jTextFieldName.setNextFocusableComponent(jTextFieldStreet);
        jTextFieldName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyTyped(evt);
            }
        });
        jTextFieldName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextFieldNameMousePressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        jPanel9.add(jTextFieldName, gridBagConstraints);

        jButtonRecall.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("buttonRecall" ));
        jButtonRecall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRecallActionPerformed(evt);
            }
        });

        jPanel9.add(jButtonRecall, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator2, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelStreetDBSP" ));
        jLabel5.setName("Nb Place");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel5, gridBagConstraints);

        jTextFieldStreet.setFont(new java.awt.Font("Dialog", 0, 18));
        jTextFieldStreet.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldStreet.setText(booking.getClient().getStreet());
        jTextFieldStreet.getDocument().addDocumentListener(

            new DocumentListener(){
                public void insertUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setStreet( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void removeUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setStreet( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void changedUpdate( DocumentEvent event) {}

            }

        );
        jTextFieldStreet.setNextFocusableComponent(jTextFieldTown);
        jTextFieldStreet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextFieldStreetMousePressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        jPanel9.add(jTextFieldStreet, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator6, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelTownDPSP" ));
        jLabel18.setName("Nb Place");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel18, gridBagConstraints);

        jTextFieldTown.setFont(new java.awt.Font("Dialog", 0, 18));
        jTextFieldTown.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldTown.setText(booking.getClient().getTown());
        jTextFieldTown.getDocument().addDocumentListener(

            new DocumentListener(){
                public void insertUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setTown( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void removeUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setTown( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void changedUpdate( DocumentEvent event) {}

            }

        );
        jTextFieldTown.setNextFocusableComponent(jTextFieldPhone);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        jPanel9.add(jTextFieldTown, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator13, gridBagConstraints);

        jLabel19.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelPhoneNumberDPSP" ));
        jLabel19.setName("Nb Place");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel19, gridBagConstraints);

        jTextFieldPhone.setFont(new java.awt.Font("Dialog", 0, 18));
        jTextFieldPhone.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldPhone.setText(booking.getClient().getPhone());
        jTextFieldPhone.getDocument().addDocumentListener(

            new DocumentListener(){
                public void insertUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setPhone( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void removeUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setPhone( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void changedUpdate( DocumentEvent event) {}

            }

        );
        jTextFieldPhone.setNextFocusableComponent(jTextFieldEmail);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        jPanel9.add(jTextFieldPhone, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator14, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator15, gridBagConstraints);

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelEmailDPSPM" ));
        jLabel20.setName("Nb Place");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel20, gridBagConstraints);

        jTextFieldEmail.setFont(new java.awt.Font("Dialog", 0, 18));
        jTextFieldEmail.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldEmail.setText(booking.getClient().getEmail());
        jTextFieldEmail.getDocument().addDocumentListener(

            new DocumentListener(){
                public void insertUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setEmail( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void removeUpdate( DocumentEvent event ){

                    Document a = event.getDocument();
                    try{
                        String t = a.getText(0, a.getLength() );
                        booking.getClient().setEmail( t );

                    } catch(  BadLocationException e ){

                    }
                }
                public void changedUpdate( DocumentEvent event) {}

            }

        );
        jTextFieldEmail.setNextFocusableComponent(jButtonOK);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        jPanel9.add(jTextFieldEmail, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 0.1;
        jPanel9.add(jSeparator16, gridBagConstraints);

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator7.setPreferredSize(new java.awt.Dimension(0, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weighty = 0.1;
        jPanel9.add(jSeparator7, gridBagConstraints);

        jPanelBooking.add(jPanel9);

        getContentPane().add(jPanelBooking, java.awt.BorderLayout.CENTER);

        jButtonCancel.setFont(new java.awt.Font("Dialog", 0, 18));
        jButtonCancel.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("buttonCancel" ));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jPanel7.add(jButtonCancel);

        jSeparator5.setPreferredSize(new java.awt.Dimension(400, 0));
        jPanel7.add(jSeparator5);

        jButtonOK.setFont(new java.awt.Font("Dialog", 0, 18));
        jButtonOK.setText(java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("buttonOK" ));
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPanel7.add(jButtonOK);

        getContentPane().add(jPanel7, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jTextFieldNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyTyped
// TODO add your handling code here:
        if( jTextFieldName.getText().length() > 35 ){
            java.awt.Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldNameKeyTyped

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
// TODO add your handling code here:
        
        
        // check if there there are bookings to be made. If yes verify that a name was entered
        
        boolean hasBookings = false;
        boolean hasTickets = false;
        for( Price p:booking.getTarifs() ){
            if( p.getAction().toUpperCase().equals( "reservation".toUpperCase() ) && p.getNb() > 0 ){
                hasBookings = true;
            }else if( p.getAction().toUpperCase().equals( "billet".toUpperCase() ) && p.getNb() > 0 ){
                hasTickets = true;
            }
        }
        if( hasBookings && jTextFieldName.getText().equals( "" ) ){
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", key.Preferrences.getLocale() ).getString("message8" ),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", key.Preferrences.getLocale() ).getString("errorBookingM" ),
                    JOptionPane.OK_OPTION );
        }else if( !hasBookings && !hasTickets ){
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", key.Preferrences.getLocale() ).getString("message9" ),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", key.Preferrences.getLocale() ).getString("errorBookingM" ),
                    JOptionPane.OK_OPTION );   
        }else{
        
        
            // for all tarifs print ticket or register booking
            myTicket.setLastClient( booking.getClient() );
            booking.setDate( new Date() );
        
            try{
                try{
                    try{        
                        booking.confirmPreBooking(); 
                        // open calculation window
                        
                        if( booking.getSumPrice() > 0 ){
                            JDialogSelling toto = new JDialogSelling( booking, myTicket, this );
                            toto.setVisible( true );
                        }
                        
                    }catch( java.awt.print.PrinterException e3 ){
                        JOptionPane.showMessageDialog( null, "Error, COULD NOT CONFIRM PREBOOKING, please try again!", "Booking error", JOptionPane.OK_OPTION );
                    }
                }catch( PrebookingNotFoundException e2 ){
                    JOptionPane.showMessageDialog( null, "Error, COULD NOT REGISTER BOOKING, please try again!", "Booking error", JOptionPane.OK_OPTION );    
                }
                //dispose();
            }catch( java.io.IOException e1 ){
                JOptionPane.showMessageDialog( null, 
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", key.Preferrences.getLocale() ).getString("messageCouldNotWrite" ),
                    java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", key.Preferrences.getLocale() ).getString("errorBookingM" ),
                    JOptionPane.OK_OPTION );
                //JOptionPane.showMessageDialog( null, "Could not write bookings to file, try again", "Booking error", JOptionPane.OK_OPTION );           
            }
        
            flagOK = true;
            myTicket.getPerformances().fireTableDataChanged();
            setVisible( false );
        }
        
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jTableTarifFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableTarifFocusLost
// TODO add your handling code here:
        stopEditingTable();
    }//GEN-LAST:event_jTableTarifFocusLost

    private void jTextFieldStreetMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldStreetMousePressed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStreetMousePressed

    private void jTableTarifKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableTarifKeyReleased
// TODO add your handling code here:
        
       
        
    }//GEN-LAST:event_jTableTarifKeyReleased

    private void jTextFieldNameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldNameMousePressed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNameMousePressed

    private void jTextFieldNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyPressed
// TODO add your handling code here:
        
        
    }//GEN-LAST:event_jTextFieldNameKeyPressed

    private void stopEditingTable(){
        //for( int i = 0 ; i < booking.getTarifs().size(); i++ ){
            //CellEditor toto2 = jTableTarif.getCellEditor( i, 2 );
            CellEditor toto2 = jTableTarif.getCellEditor();
            if( toto2 != null ){
                //System.out.println("stop editing " + i + " " + toto2 );
                toto2.stopCellEditing();
            }else{
                //System.out.println("skipping row " + i);
            }
        //}
    }
    
    private void jTableTarifMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTarifMouseClicked
// TODO add your handling code here:
        
       int i = jTableTarif.getSelectedRow();
       
       
            if( lastSelectedRow != -1 ){
                if( lastSelectedRow != i ){
           
                    if( i != -1 ){
                            //System.out.println("setting " + evt.getKeyText( evt.getKeyChar())  + " at (" + i + ", 2)");
                            //booking.getTarifs().get( i ).setNb( 0 );
                            //jTableTarif.updateUI();
                            //booking.getTarifs().fireTableDataChanged();
                
                    }
                }
            }
       
       lastSelectedRow = i+1;
        
    }//GEN-LAST:event_jTableTarifMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
        
        //cancel();
        
    }//GEN-LAST:event_formWindowClosing

    private void jTableTarifKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableTarifKeyPressed
// TODO add your handling code here:
        
        
       //if( newEntry == true ){
       
       // if key is a number
       int i = jTableTarif.getSelectedRow();
       
      char c = evt.getKeyChar();      
      
       
       if( Character.isDigit( c )){
            if( lastSelectedRow != -1 ){
                if( lastSelectedRow != i ){
           
                    if( i != -1 ){
                            System.out.println("setting " + evt.getKeyText( evt.getKeyChar())  + " at (" + i + ", 2)");
                            booking.getTarifs().get( i ).setNb( 0 );
                            jTableTarif.updateUI();
                            //booking.getTarifs().fireTableDataChanged();
                
                    }
                }
            }
       }else if( Character.isLetter( c ) ){
            java.awt.Toolkit.getDefaultToolkit().beep(); 
            evt.consume();
       }
       
       
       /*else if ( (c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_DOWN) || (c == KeyEvent.VK_UP) || (c == KeyEvent.VK_KP_DOWN) || (c == KeyEvent.VK_KP_UP) ) {
           
       }else{
           java.awt.Toolkit.getDefaultToolkit().beep(); 
           evt.consume();
       }*/
       lastSelectedRow = i;
       
       
       //}
        
    }//GEN-LAST:event_jTableTarifKeyPressed

    private void jTableTarifKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableTarifKeyTyped
// TODO add your handling code here:
        char c = evt.getKeyChar();      
        if ( (Character.isDigit(c)) || (c == KeyEvent.VK_ENTER) && (c == KeyEvent.VK_BACK_SPACE) && (c == KeyEvent.VK_DELETE) && (c == KeyEvent.VK_DOWN) && (c == KeyEvent.VK_UP) && (c == KeyEvent.VK_KP_DOWN) && (c == KeyEvent.VK_KP_UP) ) {
        }else{
            if( c == KeyEvent.VK_TAB ){
                jTextFieldName.grabFocus();
            }
            evt.consume();
        }
    }//GEN-LAST:event_jTableTarifKeyTyped

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
// TODO add your handling code here:
        cancel();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    
    public void cancel(){
        if( isANewBooking ){
            myTicket.setLastClient( booking.getClient() );
            booking.cancelPrebooking();
            myTicket.getPerformances().fireTableDataChanged();
            //dispose();
        }else{
            try{
                try{
                    try{
                        try{
                            booking.restoreBookingInFile();
                            
                            myTicket.getPerformances().fireTableDataChanged();                           
                            booking.getPerformance().getBookings().fireTableDataChanged();
                            
                            
                            /*if( booking.getPerformance().isBeingEdited() ){
                                JOptionPane.showMessageDialog( null, "This performance is actually being edited and does not accept bookings currently", "Booking error", JOptionPane.OK_OPTION );
                            }else{
                                try{
                                    JDialogEditBookings toto = new JDialogEditBookings( booking.getPerformance(), myTicket );
                                    toto.setVisible( true );
                                }catch( IOException e ){
                                    try{
                                        //booking.getPerformance().createDataFile( 0 );
                                        JDialogEditBookings toto = new JDialogEditBookings( booking.getPerformance(), myTicket );
                                        toto.setVisible( true );
                                    }catch( IOException e2 ){
                                        JOptionPane.showMessageDialog( null, "This performance is full", "Booking error", JOptionPane.OK_OPTION );    
                                    }
                                }
                            }*/
                            
                            //dispose();
                        }catch( PerformanceBeingEditedException e4 ){
                            JOptionPane.showMessageDialog( null, "Could not restore prebooking. This performance is being edited try again!", "Booking error", JOptionPane.OK_OPTION );
                        }
                    }catch( PerformanceFullException e3){
                        JOptionPane.showMessageDialog( null, "Could not restore prebooking (Performance full)", "Booking error", JOptionPane.OK_OPTION );
                        //dispose();
                    }
                }catch( PrebookingNotFoundException e2 ){
                    JOptionPane.showMessageDialog( null, "Could not restore prebooking (Prebooking not found)", "Booking error", JOptionPane.OK_OPTION );
                    //dispose();
                }
            }catch( IOException e ){
                JOptionPane.showMessageDialog( null, "Could not restore prebooking (File error)", "File error", JOptionPane.OK_OPTION );
                //dispose();
            }
        }
        setVisible( false );
    }
    
    
    private void jButtonRecallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRecallActionPerformed
// TODO add your handling code here:
        jTextFieldName.setText( myTicket.getLastClient().getName() );
        jTextFieldStreet.setText( myTicket.getLastClient().getStreet() );
        jTextFieldTown.setText( myTicket.getLastClient().getTown() );
        jTextFieldPhone.setText( myTicket.getLastClient().getPhone() );
        jTextFieldEmail.setText( myTicket.getLastClient().getEmail() );
        jTableTarif.grabFocus();
    }//GEN-LAST:event_jButtonRecallActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new JFrameBooking( new Booking(), new BookingSystem( new File("/home/sdperret") ) ).setVisible(true);
            }
        });
    }
    
    
    public void updatePrice(){
        
            if( getSumPlaces() < 2 ){
                jLabelTotal.setText( getSumPlaces() + " " + java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelSeat" ) + " = " + getSumPrice() + " " + booking.getPerformance().getCurrency() );
            }else{
                jLabelTotal.setText( getSumPlaces() + " " + java.util.ResourceBundle.getBundle( "myticket/BundleMyTicket", myTicket.getLocale() ).getString("labelSeats" ) + " = " + getSumPrice() + " " + booking.getPerformance().getCurrency() );

            }
    }
    
    public double getSumPrice(){
        return( booking.getSumPrice() );
        /*double total = 0;

        for( Price p : booking.getTarifs() ){
            total += p.getNb()*p.getPrice();
        }
        return( total );*/
    }
    
    public int getSumPlaces(){
        return booking.getSumPlaces();
                /*int totalPlaces = 0;

                for( Price p : booking.getTarifs() ){
                    totalPlaces += p.getNb();
                }
                return totalPlaces;*/
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonRecall;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelNbFreeSeats;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelBooking;
    private javax.swing.JPanel jPanelPerformance;
    private javax.swing.JPanel jPanelTarifs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTable jTableTarif;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPhone;
    private javax.swing.JTextField jTextFieldStreet;
    private javax.swing.JTextField jTextFieldTown;
    // End of variables declaration//GEN-END:variables
    
    Booking booking = null;
    BookingSystem myTicket = null;
    private boolean isANewBooking = true;
    private int lastSelectedRow = -1;
    
    public boolean flagOK = false;
    
}
